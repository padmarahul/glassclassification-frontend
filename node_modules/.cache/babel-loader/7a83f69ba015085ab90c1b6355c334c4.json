{"ast":null,"code":"var _jsxFileName = \"/Users/sairahulpadma/Desktop/UNT/SPRING-2024/SDAI/glassclassification-frontend/src/pages/textClassification/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport Navbar2 from \"../../components/Navbar/navbar2\";\nimport TM from \"../../common/assets/form.svg\";\nimport \"./Features.css\";\nimport { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { HeroBtnWrapper, ArrowForward, ArrowRight } from \"../../components/HeroSection/HeroElements\";\nimport { Button } from \"../../components/ButtonElement\";\nimport CircularProgress from \"@mui/material/CircularProgress\";\nimport Box from \"@mui/material/Box\";\nimport { FeaturesRow, FeaturesColumn, TextWrapper, Img, TopLine, FeaturesSec, FeaturesContainer, ImgWrapper, Table, FeatureWrap } from \"./Features.elements\";\nimport Collapse from \"rc-collapse\";\nimport GlassClassificationServices from \"../../services/GlassClassificationServices\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nvar Panel = Collapse.Panel;\n\nrequire(\"rc-collapse/assets/index.css\");\n\nconst TextClassification = ({\n  lightTopLine\n}) => {\n  _s();\n\n  const [text, setText] = useState('');\n  const [submittedText, setSubmittedText] = useState('');\n  const [classification, setClassification] = useState(\"\");\n  const [keyCharacteristics, setKeyCharacteristics] = useState([]); // const handleSubmit = async (e) => {\n  //   e.preventDefault();\n  //   setSubmittedText(text);\n  //   try {\n  //     const response = await fetch('http://localhost:8001/ml/classify-text', {\n  //       method: 'POST',\n  //       headers: { 'Content-Type': 'application/json' },\n  //       body: JSON.stringify({ description: text })\n  //     });\n  //     const result = await response.json();\n  //     if(result != null){\n  //     setClassification(result.class[0]);\n  //     setKeyCharacteristics(result.key_characteristics);\n  //     }\n  //   } catch (error) {\n  //     console.error('Error:', error);\n  //     alert('Failed to classify the text.');\n  //   }\n  // };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    setSubmittedText(text);\n    const data = {\n      description: text\n    }; // Creating an object with a key 'description'\n\n    GlassClassificationServices.classifyText(data).then(response => {\n      console.log(\"rrr\", response);\n      setKeyCharacteristics(response.data.key_characteristics);\n      setClassification(response.data.predicted_class);\n    }).catch(error => {\n      console.log(error);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Navbar2, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FeaturesSec, {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Glass Type Classification from Text\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-classification-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: handleSubmit,\n          children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n            className: \"text-input\",\n            value: text,\n            onChange: e => setText(e.target.value),\n            placeholder: \"Enter glass description here...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 77,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"classify-button\",\n            children: \"Classify\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }, this), submittedText && /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"classification-result\",\n            children: [\"Glass Type Classification: \", classification]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 14\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"submitted-text\",\n            children: [\"Submitted Description: \", submittedText]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 1\n        }, this), keyCharacteristics.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"key-characteristics\",\n          children: [/*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Key Characteristics From Text:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 99,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 100,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: keyCharacteristics.map((char, index) => /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"li\", {\n                children: char\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n\n_s(TextClassification, \"ewbDfGDIY2NyCl1yOtfSh0auhQc=\");\n\n_c = TextClassification;\nexport default TextClassification;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextClassification\");","map":{"version":3,"sources":["/Users/sairahulpadma/Desktop/UNT/SPRING-2024/SDAI/glassclassification-frontend/src/pages/textClassification/index.js"],"names":["React","useState","Navbar2","useEffect","useParams","HeroBtnWrapper","ArrowForward","ArrowRight","Button","CircularProgress","Box","FeaturesRow","FeaturesColumn","TextWrapper","Img","TopLine","FeaturesSec","FeaturesContainer","ImgWrapper","Table","FeatureWrap","Collapse","GlassClassificationServices","Panel","require","TextClassification","lightTopLine","text","setText","submittedText","setSubmittedText","classification","setClassification","keyCharacteristics","setKeyCharacteristics","handleSubmit","e","preventDefault","data","description","classifyText","then","response","console","log","key_characteristics","predicted_class","catch","error","target","value","length","map","char","index"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Navbar2 from \"../../components/Navbar/navbar2\";\r\nimport TM from \"../../common/assets/form.svg\";\r\nimport \"./Features.css\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport {\r\n  HeroBtnWrapper,\r\n  ArrowForward,\r\n  ArrowRight,\r\n} from \"../../components/HeroSection/HeroElements\";\r\nimport { Button } from \"../../components/ButtonElement\";\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport Box from \"@mui/material/Box\";\r\nimport {\r\n  FeaturesRow,\r\n  FeaturesColumn,\r\n  TextWrapper,\r\n  Img,\r\n  TopLine,\r\n  FeaturesSec,\r\n  FeaturesContainer,\r\n  ImgWrapper,\r\n  Table,\r\n  FeatureWrap,\r\n} from \"./Features.elements\";\r\nimport Collapse from \"rc-collapse\";\r\nimport GlassClassificationServices from \"../../services/GlassClassificationServices\";\r\nvar Panel = Collapse.Panel;\r\nrequire(\"rc-collapse/assets/index.css\");\r\n\r\nconst TextClassification = ({ lightTopLine }) => {\r\n  const [text, setText] = useState('');\r\n  const [submittedText, setSubmittedText] = useState('');\r\n  const [classification, setClassification] = useState(\"\");\r\n  const [keyCharacteristics, setKeyCharacteristics] = useState([]);\r\n  // const handleSubmit = async (e) => {\r\n  //   e.preventDefault();\r\n  //   setSubmittedText(text);\r\n  //   try {\r\n  //     const response = await fetch('http://localhost:8001/ml/classify-text', {\r\n  //       method: 'POST',\r\n  //       headers: { 'Content-Type': 'application/json' },\r\n  //       body: JSON.stringify({ description: text })\r\n  //     });\r\n\r\n  //     const result = await response.json();\r\n  //     if(result != null){\r\n  //     setClassification(result.class[0]);\r\n  //     setKeyCharacteristics(result.key_characteristics);\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.error('Error:', error);\r\n  //     alert('Failed to classify the text.');\r\n  //   }\r\n  // };\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    setSubmittedText(text);\r\n    const data = { description: text }; // Creating an object with a key 'description'\r\n    GlassClassificationServices.classifyText(data).then(response => {\r\n        console.log(\"rrr\",response)\r\n      setKeyCharacteristics(response.data.key_characteristics);\r\n      setClassification(response.data.predicted_class)\r\n    }).catch(error => {\r\n        console.log(error)\r\n    })\r\n};\r\n\r\n  return (\r\n    <>\r\n      <Navbar2 />\r\n      <FeaturesSec>\r\n        <h1>Glass Type Classification from Text</h1>\r\n        <div className=\"text-classification-container\">\r\n          <form onSubmit={handleSubmit}>\r\n            <textarea\r\n              className=\"text-input\"\r\n              value={text}\r\n              onChange={(e) => setText(e.target.value)}\r\n              placeholder=\"Enter glass description here...\"\r\n            />\r\n            <button type=\"submit\" className=\"classify-button\">Classify</button>\r\n          </form>\r\n          {submittedText && (\r\n            <>\r\n             <p className=\"classification-result\">Glass Type Classification: {classification}</p>\r\n             <br>\r\n             </br>\r\n              <p className=\"submitted-text\">Submitted Description: {submittedText}</p>\r\n            </>\r\n\r\n          )}\r\n\r\n<br>\r\n</br>\r\n          {keyCharacteristics.length > 0 && (\r\n            <div className=\"key-characteristics\">\r\n              <p>Key Characteristics From Text:</p>\r\n              <br>\r\n              </br>\r\n              <ul>\r\n                {keyCharacteristics.map((char, index) => (\r\n                  <>\r\n                    <li key={index}>{char}</li>\r\n                  <br>\r\n                  </br>\r\n                  </>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n      </FeaturesSec>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TextClassification;\r\n"]},"metadata":{},"sourceType":"module"}